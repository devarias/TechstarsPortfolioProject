[{"/home/omsebas/techstars_heroku/client/src/index.js":"1","/home/omsebas/techstars_heroku/client/src/reportWebVitals.js":"2","/home/omsebas/techstars_heroku/client/src/App.js":"3","/home/omsebas/techstars_heroku/client/src/components/Spinner.jsx":"4","/home/omsebas/techstars_heroku/client/src/components/Page.jsx":"5","/home/omsebas/techstars_heroku/client/src/components/Navsider.jsx":"6","/home/omsebas/techstars_heroku/client/src/components/ModifySurvey.jsx":"7","/home/omsebas/techstars_heroku/client/src/components/LoadTable.jsx":"8","/home/omsebas/techstars_heroku/client/src/components/UploadFile.jsx":"9","/home/omsebas/techstars_heroku/client/src/components/TableReschedule.jsx":"10","/home/omsebas/techstars_heroku/client/src/components/TableSchedule.jsx":"11","/home/omsebas/techstars_heroku/client/src/components/LogoutButton.jsx":"12","/home/omsebas/techstars_heroku/client/src/components/ManageSurveyTable.jsx":"13","/home/omsebas/techstars_heroku/client/src/components/ColorCode.jsx":"14","/home/omsebas/techstars_heroku/client/src/components/TableResults.jsx":"15","/home/omsebas/techstars_heroku/client/src/Parts/CellPopOver.jsx":"16","/home/omsebas/techstars_heroku/client/src/components/ModalBox.jsx":"17","/home/omsebas/techstars_heroku/client/src/Parts/buttonsOfPopUp.jsx":"18","/home/omsebas/techstars_heroku/client/src/Parts/buttonReschedule.jsx":"19","/home/omsebas/techstars_heroku/client/src/Parts/buttonSelection.jsx":"20","/home/omsebas/techstars_heroku/client/src/components/EditMentors.jsx":"21","/home/omsebas/techstars_heroku/client/src/Parts/formDeleteMentors.jsx":"22","/home/omsebas/techstars_heroku/client/src/Parts/formAddMentor.jsx":"23","/home/omsebas/techstars_heroku/client/src/Parts/cancelAllPopUp.jsx":"24","/home/omsebas/techstars_heroku/client/src/Parts/cancelAllMeetings.jsx":"25"},{"size":731,"mtime":1615494501771,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1615494501771,"results":"28","hashOfConfig":"27"},{"size":528,"mtime":1615696654275,"results":"29","hashOfConfig":"27"},{"size":147,"mtime":1615494501771,"results":"30","hashOfConfig":"27"},{"size":3444,"mtime":1615954177343,"results":"31","hashOfConfig":"27"},{"size":2153,"mtime":1615871995961,"results":"32","hashOfConfig":"27"},{"size":2077,"mtime":1615494501771,"results":"33","hashOfConfig":"27"},{"size":1152,"mtime":1615696654451,"results":"34","hashOfConfig":"27"},{"size":5274,"mtime":1615941900343,"results":"35","hashOfConfig":"27"},{"size":5603,"mtime":1615946474209,"results":"36","hashOfConfig":"27"},{"size":14130,"mtime":1615951564005,"results":"37","hashOfConfig":"27"},{"size":277,"mtime":1615494501771,"results":"38","hashOfConfig":"27"},{"size":936,"mtime":1615494501771,"results":"39","hashOfConfig":"27"},{"size":829,"mtime":1615494501771,"results":"40","hashOfConfig":"27"},{"size":3662,"mtime":1615739922038,"results":"41","hashOfConfig":"27"},{"size":1161,"mtime":1615941373289,"results":"42","hashOfConfig":"27"},{"size":1565,"mtime":1615696654451,"results":"43","hashOfConfig":"27"},{"size":1079,"mtime":1615934592837,"results":"44","hashOfConfig":"27"},{"size":1187,"mtime":1615939020523,"results":"45","hashOfConfig":"27"},{"size":1214,"mtime":1615938487375,"results":"46","hashOfConfig":"27"},{"size":683,"mtime":1615914702042,"results":"47","hashOfConfig":"27"},{"size":1856,"mtime":1615941800413,"results":"48","hashOfConfig":"27"},{"size":3637,"mtime":1615943292000,"results":"49","hashOfConfig":"27"},{"size":1124,"mtime":1615941733109,"results":"50","hashOfConfig":"27"},{"size":1541,"mtime":1615938762934,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"5wg4bu",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/omsebas/techstars_heroku/client/src/index.js",[],["112","113"],"/home/omsebas/techstars_heroku/client/src/reportWebVitals.js",[],"/home/omsebas/techstars_heroku/client/src/App.js",[],"/home/omsebas/techstars_heroku/client/src/components/Spinner.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/Page.jsx",["114"],"/home/omsebas/techstars_heroku/client/src/components/Navsider.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/ModifySurvey.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/LoadTable.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/UploadFile.jsx",["115"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CSVReader } from \"react-papaparse\";\nimport { Button } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport \"../styles/UploadFile.css\";\n\n/**\n * UploadFile is the component to upload the CSV to generate the schedule\n * @setReschedule: this setter sends the response schedule data from the back-end to\n * be used to\n * build the datatable.\n * @setView: is used to redirect automatically from the generate meeting section to\n * the meeting table view\n */\nconst UploadFile = ({ setRechargeMeetings, setView }) => {\n  /* isReset manages the unmounting process for the uploaded CSV file*/\n  const [isReset, setIsReset] = useState(false);\n  /* jsonData stores the data of the uploaded CSV */\n  const [jsonData, setJsonData] = useState(null);\n  /* fetched is used to know when the the generation of the schedule is done to redirect\n   * the user to the scheduling table */\n  const [fetched, setFetched] = useState(false);\n  const [loading, setLoading] = useState(0);\n  const message = [\n    \"Drop CSV file here or click to upload\",\n    \"Generating schedule.\\nPlease wait to be redirected...\",\n  ];\n  const history = useHistory();\n\n  /* This effect redirects from this component to the table schedule view and cleans \n  this component*/\n  useEffect(() => {\n    if (fetched === true) {\n      history.push(\"/MeetingsTable\");\n      setRechargeMeetings(true);\n      setView(4);\n    }\n    return () => {};\n  }, [fetched]);\n\n  /* This funtions handles the actions when a CSV file is uploaded */\n  const handleOnDrop = (data) => {\n    const data_list = data.map((row) => row.data);\n    setJsonData(JSON.stringify(data_list));\n  };\n\n  /* This function handles Error with the uploaded file */\n  const handleOnError = (err, file, inputElem, reason) => {\n    alert(err);\n    setIsReset(true);\n    setJsonData(null);\n    alert(\"Error: %s\", reason);\n  };\n\n  /* Removes the file from the front-end to allow the upload of another file \n  or when an error ocurred */\n  const handleOnRemoveFile = (data) => {\n    setIsReset(true);\n    setJsonData(null);\n  };\n\n  /* Handles the querying to the back-end to generate the shedule*/\n  const handleSubmit = () => {\n    if (jsonData !== null) {\n      if (\n        window.confirm(\n          \"A new meeting schedule is going to be generated\\nand the actual schedule will be erased permanently\\nDo you want to continue?\"\n        )\n      ) {\n        setIsReset(true);\n        setLoading(1);\n        fetch(\n          \"http://localhost:3033/api/schedule\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n            },\n            body: jsonData,\n          }\n        )\n          .then((response) => response.json())\n          .then((result) => {\n            /*result is the generated schedule without conflicts*/\n            //setResSchedule(result);\n            setIsReset(true);\n            /* with this we call the use effect to redirect to other component and clean \n              the actual component */\n            setFetched(true);\n          })\n          .catch((error) => {\n            setIsReset(true);\n            setJsonData(null);\n            console.error(\"Error:\", error);\n          });\n      } else {\n        setIsReset(true);\n      }\n    }\n  };\n\n  const handleSubmitButton = () => {\n    if (jsonData !== null) {\n      return (\n        <Button\n          id=\"buttonUpload\"\n          type=\"primary\"\n          shape=\"round\"\n          icon={<SendOutlined />}\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      );\n    }\n  };\n  return (\n    <>\n      <CSVReader\n        className=\"boxCsvParser\"\n        accept=\"text/csv, .csv, application/vnd.ms-excel\"\n        progressBarColor=\"#39C463\"\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        s\n        addRemoveButton\n        isReset={isReset}\n        onRemoveFile={handleOnRemoveFile}\n        config={{ header: true }}\n        style={{\n          dropArea: {\n            borderColor: \"pink\",\n            height: 200,\n            width: 400,\n            borderRadius: 20,\n          },\n          dropAreaActive: {\n            borderColor: \"red\",\n          },\n          dropFile: {\n            width: 100,\n            height: 100,\n            background: \"#ccc\",\n          },\n          fileSizeInfo: {\n            color: \"#000\",\n            backgroundColor: \"#fff\",\n            borderRadius: 3,\n            lineHeight: 1,\n            marginBottom: \"0.5em\",\n            padding: \"0 0.4em\",\n          },\n          fileNameInfo: {\n            color: \"#000\",\n            backgroundColor: \"#fff\",\n            borderRadius: 3,\n            fontSize: 14,\n            lineHeight: 1,\n            padding: \"0 0.4em\",\n          },\n          removeButton: {\n            color: \"#39C463\",\n          },\n          progressBar: {\n            backgroundColor: \"#39C463\",\n          },\n        }}\n      >\n        <span>{message[loading]}</span>\n      </CSVReader>\n      {handleSubmitButton()}\n    </>\n  );\n};\n\nexport default UploadFile;\n","/home/omsebas/techstars_heroku/client/src/components/TableReschedule.jsx",["116"],"import React, { useState, useRef } from \"react\";\nimport { Table } from \"antd\";\nimport RescheduleButton from \"../Parts/buttonReschedule\";\nimport SelectionButton from \"../Parts/buttonSelection\";\n\nconst TableReschedule = ({\n  mentors,\n  pendingMeetings,\n  setRechargeReschedule,\n}) => {\n  const [possibleMeetings, setPossibleMeetings] = useState([]);\n  const [view, setView] = useState(0);\n  /* FilteredInfo handles the mentors and days to be filtered */\n  const [filteredInfo, setFilteredInfo] = useState({});\n  /* SortedInfo handles the information for sorting the mentor column */\n  const [sortedInfo, setSortedInfo] = useState({});\n  console.log(possibleMeetings);\n  const mentor_list = pendingMeetings.map((row) => {\n    return { text: row.mentor, value: row.mentor };\n  });\n\n  const columnsAction = [\n    {\n      title: \"Mentor\",\n      width: 100,\n      dataIndex: \"mentor\",\n      key: \"mentor\",\n      fixed: \"left\",\n      filters: mentor_list.sort(function (a, b) {\n        let nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.mentor.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.mentor.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"mentor\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n    },\n    {\n      title: \"Companies\",\n      width: 100,\n      dataIndex: \"Companies\",\n      key: \"Companies\",\n      fixed: \"left\",\n      render(record) {\n        let text = record.join(\", \");\n        return { children: <div>{text}</div> };\n      },\n    },\n    {\n      title: \"Action\",\n      key: \"operation\",\n      fixed: \"right\",\n      width: 100,\n      render: (record) => (\n        <RescheduleButton\n          record={record}\n          setPossibleMeetings={setPossibleMeetings}\n          setView={setView}\n        />\n      ),\n    },\n  ];\n\n  const columnsSelection = [\n    {\n      title: \"Mentor\",\n      width: 100,\n      dataIndex: \"Mentor\",\n      key: \"mentor1\",\n      fixed: \"left\",\n    },\n    {\n      title: \"Day\",\n      width: 100,\n      dataIndex: \"Day\",\n      key: \"Day\",\n      fixed: \"left\",\n      filters: mentor_list.sort(function (a, b) {\n        let nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.Day.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.Day.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"Day\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n    },\n    {\n      title: \"Block\",\n      width: 100,\n      dataIndex: \"Block\",\n      key: \"Block\",\n      fixed: \"left\",\n      filters: mentor_list.sort(function (a, b) {\n        let nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.Block.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.Block.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"Block\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n    },\n    {\n      title: \"Action\",\n      key: \"operation\",\n      fixed: \"right\",\n      width: 100,\n      render: (record) => (\n        <SelectionButton\n          view={view}\n          record={record}\n          setRechargeReschedule={setRechargeReschedule}\n          setView={setView}\n        />\n      ),\n    },\n  ];\n  const handleChange = (pagination, filters, sorter) => {\n    setFilteredInfo(filters);\n    setSortedInfo(sorter);\n  };\n  const pageView = [\n    <Table\n      title={() =>\n        \"Please click on reschedule to display the options for the mentor\"\n      }\n      size=\"small\"\n      columns={columnsAction}\n      dataSource={pendingMeetings}\n      scroll={{ x: \"max-content\" }}\n      pagination={{ pageSize: 50 }}\n      onChange={handleChange}\n    />,\n    <Table\n      title={() =>\n        \"These are the available options to reschedule the mentor. \\nPlease select a day and block and click on program meetings to generate the new schedule\"\n      }\n      size=\"small\"\n      columns={columnsSelection}\n      dataSource={possibleMeetings}\n      scroll={{ x: \"max-content\" }}\n      pagination={{ pageSize: 50 }}\n      onChange={handleChange}\n    />,\n  ];\n\n  return <>{pageView[view]}</>;\n};\n\nexport default TableReschedule;\n","/home/omsebas/techstars_heroku/client/src/components/TableSchedule.jsx",["117","118","119","120","121","122"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Space, Select } from \"antd\";\nimport { CSVDownloader, jsonToCSV } from \"react-papaparse\";\nimport CellPopUp from \"../Parts/CellPopOver\";\nimport CancelAllPopUp from \"../Parts/cancelAllPopUp\";\nimport { withRouter } from \"react-router\";\nconst { Option } = Select;\n\nconst colors = [\n  \"#483D8B\",\n  \"#8FBC8F\",\n  \"#E9967A\",\n  \"#8B0000\",\n  \"#9932CC\",\n  \"#FF8C00\",\n  \"#4B0082\",\n  \"#008000\",\n  \"#808080\",\n  \"#c9db00\",\n  \"#008080\",\n];\n\n/**\n * TableSchedule is the component to generate the data table for the schedule.\n * @resSchedule: is the information retrieved form the back-end to generate the scheduling table\n * the request is done on the UploadFile.jsx\n */\nconst TableSchedule = ({\n  resSchedule,\n  companies,\n  tableDisplay,\n  setRechargeMeetings,\n}) => {\n  /* Block handles the state of the column tables to be rendered */\n  const [block, setBlock] = useState(\"AM\");\n  /* FilteredInfo handles the mentors and days to be filtered */\n  const [filteredInfo, setFilteredInfo] = useState({});\n  /* SortedInfo handles the information for sorting the mentor column */\n  const [sortedInfo, setSortedInfo] = useState({});\n  /*State that detects when a  meeting is cancelled */\n  const [cancelMeeting, setCancelMeeting] = useState(0);\n\n  const getData = async (path) => {\n    const response = await fetch(`http://localhost:3033/api/${path}`, {\n      method: \"GET\",\n      headers: {\n        \"content-Type\": \"application/json\",\n        Accept: \"aplication/json\",\n      },\n    });\n    return response.json();\n  };\n\n  useEffect(async () => {\n    if (cancelMeeting === true) {\n      setCancelMeeting(false);\n      setRechargeMeetings(true);\n    }\n  }, [cancelMeeting]);\n\n  /* Wrangling the recieved data to generate the list to filter the mentors and the days*/\n  const mentor_am_filter = resSchedule.filter((obj) => {\n    return obj.Block === \"AM\";\n  });\n\n  const mentor_am = mentor_am_filter.map((obj) => {\n    return { text: obj.Mentor, value: obj.Mentor };\n  });\n\n  const mentor_pm_filter = resSchedule.filter((obj) => {\n    return obj.Block === \"PM\";\n  });\n\n  const mentor_pm = mentor_pm_filter.map((obj) => {\n    return { text: obj.Mentor, value: obj.Mentor };\n  });\n\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n  const days_filter = days.map((day) => {\n    return { text: day, value: day };\n  });\n\n  const list_comp = companies.map((obj) => {\n    return obj.company;\n  });\n\n  const list_comp_colors = list_comp.map((comp, index) => {\n    let col = colors[index];\n    return { company: comp, color: col };\n  });\n\n  const AM = [\n    {\n      title: \"Mentor\",\n      dataIndex: \"Mentor\",\n      key: \"Mentor\",\n      filters: mentor_am.sort(function (a, b) {\n        let nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.Mentor.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.Mentor.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n      onFilter: (value, record) => record.Mentor.indexOf(value) === 0,\n      render(text, record) {\n        return cancelMentor(text, record);\n      },\n      width: 150,\n      background: \"#FFFFFF\",\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"Day\",\n      dataIndex: \"Day\",\n      key: \"Day\",\n      filters: days_filter,\n      filteredValue: filteredInfo?.Day || null,\n      onFilter: (value, record) => record.Day.indexOf(value) === 0,\n      width: 100,\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"08:00\",\n      dataIndex: \"08:00:00\",\n      key: \"08:00:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"08:20\",\n      dataIndex: \"08:20:00\",\n      key: \"08:20:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"08:40\",\n      dataIndex: \"08:40:00\",\n      key: \"08:40:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"09:00\",\n      dataIndex: \"09:00:00\",\n      key: \"09:00:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"09:20\",\n      dataIndex: \"09:20:00\",\n      key: \"09:20:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"09:40\",\n      dataIndex: \"09:40:00\",\n      key: \"09:40:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"10:00\",\n      dataIndex: \"10:00:00\",\n      key: \"10:00:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"10:20\",\n      dataIndex: \"10:20:00\",\n      key: \"10:20\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"10:40\",\n      dataIndex: \"10:40:00\",\n      key: \"10:40:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"11:00\",\n      dataIndex: \"11:00:00\",\n      key: \"11:00:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"11:20\",\n      dataIndex: \"11:20:00\",\n      key: \"11:20:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"11:40\",\n      dataIndex: \"11:40:00\",\n      key: \"11:40:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n  ];\n\n  /* Description of the Columns for the PM block table */\n  const PM = [\n    {\n      title: \"Mentor\",\n      dataIndex: \"Mentor\",\n      key: \"Mentor\",\n      filters: mentor_pm.sort(function (a, b) {\n        var nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        var nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.Mentor.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.Mentor.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n      onFilter: (value, record) => record.Mentor.indexOf(value) === 0,\n      sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n      width: 150,\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"Day\",\n      dataIndex: \"Day\",\n      key: \"Day\",\n      filters: days_filter,\n      filteredValue: filteredInfo?.Day || null,\n      onFilter: (value, record) => record.Day.indexOf(value) === 0,\n      width: 100,\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"13:10\",\n      dataIndex: \"13:10:00\",\n      key: \"13:10:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"13:30\",\n      dataIndex: \"13:30:00\",\n      key: \"13:30:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"13:50\",\n      dataIndex: \"13:50:00\",\n      key: \"13:50:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"14:10\",\n      dataIndex: \"14:10:00\",\n      key: \"14:00:10\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"14:30\",\n      dataIndex: \"14:30:00\",\n      key: \"14:30:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"14:50\",\n      dataIndex: \"14:50:00\",\n      key: \"14:50:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"15:10\",\n      dataIndex: \"15:10:00\",\n      key: \"15:10:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"15:30\",\n      dataIndex: \"15:30:00\",\n      key: \"15:30:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"15:50\",\n      dataIndex: \"15:50:00\",\n      key: \"15:50:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"16:10\",\n      dataIndex: \"16:10:00\",\n      key: \"16:10:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"16:30\",\n      dataIndex: \"16:30:00\",\n      key: \"16:30:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"16:50\",\n      dataIndex: \"16:50:00\",\n      key: \"16:50:00\",\n      render(text, record) {\n        return cell_color(text, record);\n      },\n      align: \"center\",\n      width: 130,\n    },\n  ];\n\n  /* This function is in charge to color format every cell on the schedule table according to the company */\n  function cell_color(text, record) {\n    if (text !== null) {\n      let color = list_comp_colors.filter((obj) => {\n        return obj.company === text;\n      });\n      let col_row;\n      col_row = color ? color[0]?.color : \"#FFFFFF\";\n      return {\n        props: {\n          style: {\n            backgroundColor: col_row,\n            borderRadius: \"10px\",\n            bordered: \"10px\",\n          },\n        },\n        children: (\n          <CellPopUp\n            text={text}\n            record={record}\n            setCancelMeeting={setCancelMeeting}\n          />\n        ),\n      };\n    } else {\n      //return { children: <div>{text}</div> };\n    }\n  }\n\n  /* This function is in charge to color format every cell on the schedule table according to the company */\n  function cancelMentor(text, record) {\n    return {\n      children: (\n        <CancelAllPopUp\n          text={text}\n          record={record}\n          setCancelMeeting={setCancelMeeting}\n        />\n      ),\n    };\n  }\n\n  /* Handle the change on the filter and sorters components */\n  const handleChange = (pagination, filters, sorter) => {\n    setFilteredInfo(filters);\n    setSortedInfo(sorter);\n  };\n\n  /* Handles the clear for the filters */\n  const clearFilters = () => {\n    setFilteredInfo(null);\n  };\n\n  /* handles the display of the AM and PM tables */\n  const handleBlock = (value) => {\n    setBlock(value);\n  };\n  let dataFilterAM = resSchedule.filter((row) => row.Block === \"AM\");\n  let dataFilterPM = resSchedule.filter(\n    (row) => row.Block === \"PM\"\n  ); /*  \n  const dataFilterAMPop = dataFilterAM.map((obj) => {\n    delete obj[\"Slots\"];\n    return obj;\n  });\n  const dataFilterPMPop = dataFilterPM.map((obj) => {\n    delete obj[\"Slots\"];\n    return obj;\n  }); */\n\n  /* Generate the download file */ let download = jsonToCSV(\n    JSON.stringify(resSchedule)\n  ); /* +\n    \"\\n\\n\\n\\n\" +\n    jsonToCSV(JSON.stringify(dataFilterPMPop)); */\n\n  /* render the button download if the data is available */\n  const renderDownload = () => {\n    if (resSchedule.length > 0) {\n      return (\n        <CSVDownloader\n          className=\"downloadBtn\"\n          data={download}\n          type=\"button\"\n          filename={\"schedule\"}\n          style={{\n            color: \"#fff\",\n            backgroundColor: \"#39C463\",\n            borderRadius: \"5px\",\n            height: 32,\n            borderColor: \"#39C463\",\n            width: 110,\n            disable: true,\n          }}\n          bom={true}\n        >\n          Download\n        </CSVDownloader>\n      );\n    }\n  };\n\n  return (\n    <>\n      <Space style={{ marginBottom: 16, marginLeft: 20 }}>\n        <span>Select Block:</span>\n        <Select defaultValue=\"AM\" style={{ width: 110 }} onChange={handleBlock}>\n          <Option value=\"AM\">AM</Option>\n          <Option value=\"PM\">PM</Option>\n        </Select>\n        <Button onClick={clearFilters}>Clear filters</Button>\n        {renderDownload()}\n      </Space>\n      {tableDisplay ? (\n        <Table\n          className=\"ant-table-layout-fixed\"\n          rowKey={(record) => record.uid}\n          style={{ marginBottom: 5 }}\n          bordered\n          pagination={{ pageSize: 50 }}\n          scroll={{ x: \"max-content\" }}\n          size=\"small\"\n          columns={block === \"AM\" ? AM : PM}\n          sticky\n          dataSource={block === \"AM\" ? dataFilterAM : dataFilterPM}\n          onChange={handleChange}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default TableSchedule;\n","/home/omsebas/techstars_heroku/client/src/components/LogoutButton.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/ManageSurveyTable.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/ColorCode.jsx",[],"/home/omsebas/techstars_heroku/client/src/components/TableResults.jsx",[],"/home/omsebas/techstars_heroku/client/src/Parts/CellPopOver.jsx",["123"],"import React, { useState } from \"react\";\nimport { Popover } from \"antd\";\nimport PopButtons from \"./buttonsOfPopUp\";\nimport \"../styles/CellPopOver.css\";\n/**\n * component that renders the popup menu of each cell on tableschedule\n * props:\n * @param {text} : the company name for the cell\n * @param {record}: It is used to detect with row was activated and return his key\n * fetch the cancel action to the backend\n * @returns None\n */\nconst CellPopUp = ({ text, record, setCancelMeeting, setView }) => {\n  /* Handles the popUp action on the cell table */\n  const [popUp, setPopUp] = useState(false);\n\n  const handleVisiblePopUp = (visible) => {\n    setPopUp(popUp ? false : true);\n  };\n  return (\n    <Popover\n      content={\n        <PopButtons\n          text={text}\n          record={record}\n          setPopUp={setPopUp}\n          setCancelMeeting={setCancelMeeting}\n          setView={setView}\n        />\n      }\n      style={{ borderRadius: 20 }}\n      trigger=\"click\"\n      visible={popUp}\n      onVisibleChange={handleVisiblePopUp}\n    >\n      <a href=\"#\" id=\"cellPop\">\n        <div>{text}</div>\n      </a>\n    </Popover>\n  );\n};\n\nexport default CellPopUp;\n","/home/omsebas/techstars_heroku/client/src/components/ModalBox.jsx",[],"/home/omsebas/techstars_heroku/client/src/Parts/buttonsOfPopUp.jsx",[],"/home/omsebas/techstars_heroku/client/src/Parts/buttonReschedule.jsx",["124"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\n\nconst RescheduleButton = ({ view, record, setPossibleMeetings, setView }) => {\n  const [fetched, setFetched] = useState(false);\n\n  useEffect(() => {\n    if (fetched === true) {\n      setView(1);\n      setFetched(false);\n      return () => {};\n    }\n  }, [fetched]);\n\n  const cancelMeeting = () => {\n    fetch(\n      \"http://localhost:3033/api/reschedule\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify([record]),\n      }\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        setPossibleMeetings(result);\n        setFetched(true);\n      })\n      .catch((error) => {\n        console.log(\"Error:\", error);\n      });\n  };\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={cancelMeeting}\n        style={{ borderRadius: 5 }}\n      >\n        Reschedule\n      </Button>\n    </>\n  );\n};\n\nexport default RescheduleButton;\n","/home/omsebas/techstars_heroku/client/src/Parts/buttonSelection.jsx",["125"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"antd\";\n\nconst SelectionButton = ({ record, setRechargeReschedule, setView }) => {\n  const [fetched, setFetched] = useState(false);\n\n  useEffect(() => {\n    if (fetched === true) {\n      setRechargeReschedule(true);\n      setView(0);\n      setFetched(false);\n      return () => {};\n    }\n  }, [fetched]);\n\n  const cancelMeeting = () => {\n    fetch(\n      \"http://localhost:3033/api/reschedule\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify(record),\n      }\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        alert(result.message);\n        setFetched(true);\n      })\n      .catch((error) => {\n        console.log(\"Error:\", error);\n      });\n  };\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={cancelMeeting}\n        style={{ borderRadius: 5 }}\n      >\n        Program meetings\n      </Button>\n    </>\n  );\n};\n\nexport default SelectionButton;\n","/home/omsebas/techstars_heroku/client/src/components/EditMentors.jsx",["126"],"import React from 'react';\nimport {Row, Col, Space} from 'antd';\nimport DeleteMentor from '../Parts/formDeleteMentors'\nimport AddMentor from '../Parts/formAddMentor'\nimport '../styles/EditMentors.css'\n\nconst EditMentors  = ({mentors, companies, setReloadMentors}) => {\n  \n  return (\n    <>\n      <Row className='editMentors'>\n        <Col span={12} id='boxDeleteMentors'>\n          <DeleteMentor mentors={mentors} setReloadMentors={setReloadMentors}/>\n        </Col>\n        <Col span={12} id='boxAddMentors'>\n          <AddMentor mentors={mentors} companies={companies} setReloadMentors={setReloadMentors}/>\n        </Col>\n      </Row>\n    </>\n  );  \n}\n\nexport default EditMentors;\n","/home/omsebas/techstars_heroku/client/src/Parts/formDeleteMentors.jsx",[],"/home/omsebas/techstars_heroku/client/src/Parts/formAddMentor.jsx",["127"],"import React from \"react\";\nimport { Form, Input, Button, Select, Space } from \"antd\";\nconst { Option } = Select;\n\nconst AddMentor = ({ mentors, companies, setReloadMentors }) => {\n  const [form] = Form.useForm();\n  const submitaddMentor = (value) => {\n    form.resetFields();\n    let bodyData = JSON.stringify([\n      { mentor: value.mentor, email: value.email, Companies: value.Companies },\n    ]);\n    console.log(bodyData);\n    fetch(\n      \"http://localhost:3033/api/mentors\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: bodyData,\n      }\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        alert(\"Mentor Created\");\n        setReloadMentors(true);\n      })\n      .catch((error) => {\n        alert(\"Error:\", error);\n      });\n  };\n\n  const listCompanies = companies.map((row) => (\n    <Option value={row.company}>{row.company}</Option>\n  ));\n\n  return (\n    <>\n      <Space>\n        <h1>Add Mentor</h1>\n      </Space>\n      <Form\n        form={form}\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 14,\n        }}\n        layout=\"horizontal\"\n        initialValues={{\n          size: \"small\",\n        }}\n        onFinish={submitaddMentor}\n        initialValues={{\n          remember: false,\n        }}\n      >\n        <Form.Item\n          name=\"mentor\"\n          label=\"Mentor Name\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input mentor name!\",\n              whitespace: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          label=\"Mentor Email\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input mentor email!\",\n              whitespace: true,\n            },\n            {\n              type: \"email\",\n              message: \"The input is not valid E-mail!\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"emailConfirmation\"\n          label=\"Confirm Mentor Email\"\n          dependencies={[\"email\"]}\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: \"Please input again the mentor email!\",\n              whitespace: true,\n            },\n            {\n              type: \"email\",\n              message: \"The input is not valid E-mail!\",\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue(\"email\") === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject(\n                  new Error(\"The two emails that you entered do not match!\")\n                );\n              },\n            }),\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"Companies\"\n          label=\"Select Companies\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input at least one company!\",\n            },\n          ]}\n        >\n          <Select mode=\"multiple\">{listCompanies}</Select>\n        </Form.Item>\n        <Form.Item style={{ paddingLeft: 162 }}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default AddMentor;\n","/home/omsebas/techstars_heroku/client/src/Parts/cancelAllPopUp.jsx",["128"],"import React, { useState } from \"react\";\nimport { Popover } from \"antd\";\nimport CancelAll from \"./cancelAllMeetings\";\nimport \"../styles/CellPopOver.css\";\n/**\n * component that renders the popup menu of each cell on tableschedule\n * props:\n * @param {text} : the company name for the cell\n * @param {record}: It is used to detect with row was activated and return his key\n * fetch the cancel action to the backend\n * @returns None\n */\nconst CancelAllPopUp = ({ text, record, setCancelMeeting }) => {\n  /* Handles the popUp action on the cell table */\n  const [popUp, setPopUp] = useState(false);\n\n  const handleVisiblePopUp = (visible) => {\n    setPopUp(popUp ? false : true);\n  };\n  return (\n    <Popover\n      content={\n        <CancelAll\n          text={text}\n          record={record}\n          setPopUp={setPopUp}\n          setCancelMeeting={setCancelMeeting}\n        />\n      }\n      style={{ borderRadius: 20 }}\n      trigger=\"click\"\n      visible={popUp}\n      onVisibleChange={handleVisiblePopUp}\n    >\n      <a href=\"#\" id=\"cellPop\">\n        {text}\n      </a>\n    </Popover>\n  );\n};\n\nexport default CancelAllPopUp;\n","/home/omsebas/techstars_heroku/client/src/Parts/cancelAllMeetings.jsx",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":39,"column":13,"nodeType":"135","endLine":52,"endColumn":4},{"ruleId":"133","severity":1,"message":"136","line":40,"column":6,"nodeType":"137","endLine":40,"endColumn":15,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":1,"column":27,"nodeType":"141","messageId":"142","endLine":1,"endColumn":33},{"ruleId":"139","severity":1,"message":"143","line":2,"column":8,"nodeType":"141","messageId":"142","endLine":2,"endColumn":13},{"ruleId":"139","severity":1,"message":"144","line":7,"column":10,"nodeType":"141","messageId":"142","endLine":7,"endColumn":20},{"ruleId":"139","severity":1,"message":"145","line":44,"column":9,"nodeType":"141","messageId":"142","endLine":44,"endColumn":16},{"ruleId":"133","severity":1,"message":"134","line":55,"column":13,"nodeType":"135","endLine":60,"endColumn":4},{"ruleId":"133","severity":1,"message":"146","line":60,"column":6,"nodeType":"137","endLine":60,"endColumn":21,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":300,"column":7,"nodeType":"150","messageId":"151","endLine":300,"endColumn":16},{"ruleId":"152","severity":1,"message":"153","line":36,"column":7,"nodeType":"154","endLine":36,"endColumn":32},{"ruleId":"133","severity":1,"message":"155","line":13,"column":6,"nodeType":"137","endLine":13,"endColumn":15,"suggestions":"156"},{"ruleId":"133","severity":1,"message":"157","line":14,"column":6,"nodeType":"137","endLine":14,"endColumn":15,"suggestions":"158"},{"ruleId":"139","severity":1,"message":"159","line":2,"column":19,"nodeType":"141","messageId":"142","endLine":2,"endColumn":24},{"ruleId":"160","severity":1,"message":"161","line":57,"column":9,"nodeType":"162","endLine":59,"endColumn":11},{"ruleId":"152","severity":1,"message":"153","line":35,"column":7,"nodeType":"154","endLine":35,"endColumn":32},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'history', 'setRechargeMeetings', and 'setView'. Either include them or remove the dependency array. If 'setRechargeMeetings' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["165"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'withRouter' is defined but never used.","'getData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRechargeMeetings'. Either include it or remove the dependency array. If 'setRechargeMeetings' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["166"],"no-dupe-keys","Duplicate key 'sortOrder'.","ObjectExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'setView'. Either include it or remove the dependency array. If 'setView' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["167"],"React Hook useEffect has missing dependencies: 'setRechargeReschedule' and 'setView'. Either include them or remove the dependency array. If 'setRechargeReschedule' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["168"],"'Space' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [fetched, history, setRechargeMeetings, setView]",{"range":"177","text":"178"},"Update the dependencies array to be: [cancelMeeting, setRechargeMeetings]",{"range":"179","text":"180"},"Update the dependencies array to be: [fetched, setView]",{"range":"181","text":"182"},"Update the dependencies array to be: [fetched, setRechargeReschedule, setView]",{"range":"183","text":"184"},[1521,1530],"[fetched, history, setRechargeMeetings, setView]",[1738,1753],"[cancelMeeting, setRechargeMeetings]",[338,347],"[fetched, setView]",[368,377],"[fetched, setRechargeReschedule, setView]"]