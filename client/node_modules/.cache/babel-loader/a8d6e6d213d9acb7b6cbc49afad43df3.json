{"ast":null,"code":"var _jsxFileName = \"/home/omsebas/techstars_heroku/client/src/Parts/CellPopOver.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Popover, Button } from \"antd\";\nimport PopButtons from \"./buttonsOfPopUp\";\nimport \"../styles/CellPopOver.css\";\n/**\n * component that renders the popup menu of each cell on tableschedule\n * props:\n * @param {text} : the company name for the cell\n * @param {record}: It is used to detect with row was activated and return his key\n * fetch the cancel action to the backend\n * @returns None\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellPopUp = ({\n  text,\n  record,\n  setCancelMeeting\n}) => {\n  _s();\n\n  /* Handles the popUp action on the cell table */\n  const [popUp, setPopUp] = useState(false);\n\n  const handleVisiblePopUp = visible => {\n    setPopUp(popUp ? false : true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Popover, {\n    content: /*#__PURE__*/_jsxDEV(PopButtons, {\n      text: text,\n      record: record,\n      setPopUp: setPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this),\n    style: {\n      borderRadius: 20\n    },\n    trigger: \"click\",\n    visible: popUp,\n    onVisibleChange: handleVisiblePopUp,\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      id: \"cellPop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CellPopUp, \"nRD4/ZBecQXHEH1cJbLKbkRPZNc=\");\n\n_c = CellPopUp;\nexport default CellPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellPopUp\");","map":{"version":3,"sources":["/home/omsebas/techstars_heroku/client/src/Parts/CellPopOver.jsx"],"names":["React","useState","Popover","Button","PopButtons","CellPopUp","text","record","setCancelMeeting","popUp","setPopUp","handleVisiblePopUp","visible","borderRadius"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,MAAhC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,2BAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAD,KAAuC;AAAA;;AACvD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMU,kBAAkB,GAAIC,OAAD,IAAa;AACtCF,IAAAA,QAAQ,CAACD,KAAK,GAAG,KAAH,GAAW,IAAjB,CAAR;AACD,GAFD;;AAGA,sBACE,QAAC,OAAD;AACE,IAAA,OAAO,eAAE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEH,IAAlB;AAAwB,MAAA,MAAM,EAAEC,MAAhC;AAAwC,MAAA,QAAQ,EAAEG;AAAlD;AAAA;AAAA;AAAA;AAAA,YADX;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,YAAY,EAAE;AAAhB,KAFT;AAGE,IAAA,OAAO,EAAC,OAHV;AAIE,IAAA,OAAO,EAAEJ,KAJX;AAKE,IAAA,eAAe,EAAEE,kBALnB;AAAA,2BAOE;AAAG,MAAA,EAAE,EAAC,SAAN;AAAA,6BACE;AAAA,kBAAML;AAAN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CApBD;;GAAMD,S;;KAAAA,S;AAsBN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Popover, Button } from \"antd\";\nimport PopButtons from \"./buttonsOfPopUp\";\nimport \"../styles/CellPopOver.css\";\n/**\n * component that renders the popup menu of each cell on tableschedule\n * props:\n * @param {text} : the company name for the cell\n * @param {record}: It is used to detect with row was activated and return his key\n * fetch the cancel action to the backend\n * @returns None\n */\nconst CellPopUp = ({ text, record, setCancelMeeting}) => {\n  /* Handles the popUp action on the cell table */\n  const [popUp, setPopUp] = useState(false);\n\n  const handleVisiblePopUp = (visible) => {\n    setPopUp(popUp ? false : true);\n  };\n  return (\n    <Popover\n      content={<PopButtons text={text} record={record} setPopUp={setPopUp}/>}\n      style={{ borderRadius: 20 }}\n      trigger=\"click\"\n      visible={popUp}\n      onVisibleChange={handleVisiblePopUp}\n    >\n      <a id=\"cellPop\">\n        <div>{text}</div>\n      </a>\n    </Popover>\n  );\n};\n\nexport default CellPopUp;\n"]},"metadata":{},"sourceType":"module"}