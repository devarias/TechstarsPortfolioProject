{"ast":null,"code":"var _jsxFileName = \"/home/omsebas/techstars_heroku/client/src/Parts/CellPopOver.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Popover } from \"antd\";\nimport \"../styles/CellPopOver.css\";\n/**\n * component that renders the popup menu of each cell on tableschedule\n * props:\n * @param {text} : the company name for the cell\n * @param {row}: the row belonging to the company to select the mentor and\n * fetch the cancel action to the backend\n * @returns None\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellPopUp = ({\n  text\n}) => {\n  _s();\n\n  /* Handles the popUp action on the cell table */\n  const [popUp, setPopUp] = useState(false);\n\n  const cancelMeeting = () => {\n    fetch(\"http://localhost:3033/api/meetings\"\n    /* Route to send the CSV file to \n             generate the schedule */\n    , {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: jsonData\n    }).then(response => response.json()).then(result => {\n      /*result is the generated schedule without conflicts*/\n      console.log(result); //setResSchedule(result);\n      //setIsReset(true);\n\n      /* with this we call the use effect to redirect to other component and clean \n            the actual component */\n      //setFetched(true);\n    }).catch(error => {\n      // setIsReset(true);\n      //setJsonData(null);\n      console.error(\"Error:\", error);\n    });\n  };\n\n  const handleVisiblePopUp = visible => {\n    setPopUp(popUp ? false : true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Popover, {\n    content: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: cancelMeeting,\n        children: \"Cancel Meeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: cancelMeeting,\n        children: \"Posible Reschedulings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this),\n    title: \"Title\",\n    trigger: \"click\",\n    visible: popUp,\n    onVisibleChange: handleVisiblePopUp,\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      id: \"cellPop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CellPopUp, \"nRD4/ZBecQXHEH1cJbLKbkRPZNc=\");\n\n_c = CellPopUp;\nexport default CellPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellPopUp\");","map":{"version":3,"sources":["/home/omsebas/techstars_heroku/client/src/Parts/CellPopOver.jsx"],"names":["React","useState","Popover","CellPopUp","text","popUp","setPopUp","cancelMeeting","fetch","method","headers","Accept","body","jsonData","then","response","json","result","console","log","catch","error","handleVisiblePopUp","visible"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAO,2BAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC9B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMM,aAAa,GAAG,MAAM;AAC1BC,IAAAA,KAAK,CACH;AAAqC;AAC3C;AAFS,MAGH;AACEC,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAFX;AAMEC,MAAAA,IAAI,EAAEC;AANR,KAHG,CAAL,CAYGC,IAZH,CAYSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAZtB,EAaGF,IAbH,CAaSG,MAAD,IAAY;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAFgB,CAGhB;AACA;;AACA;AACR;AACQ;AACD,KArBH,EAsBGG,KAtBH,CAsBUC,KAAD,IAAW;AAChB;AACA;AACAH,MAAAA,OAAO,CAACG,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACD,KA1BH;AA2BD,GA5BD;;AA8BA,QAAMC,kBAAkB,GAAIC,OAAD,IAAa;AACtCjB,IAAAA,QAAQ,CAACD,KAAK,GAAG,KAAH,GAAW,IAAjB,CAAR;AACD,GAFD;;AAGA,sBACE,QAAC,OAAD;AACE,IAAA,OAAO,eACL;AAAA,8BACE;AAAG,QAAA,OAAO,EAAEE,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,OAAO,EAAEA,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAQE,IAAA,KAAK,EAAC,OARR;AASE,IAAA,OAAO,EAAC,OATV;AAUE,IAAA,OAAO,EAAEF,KAVX;AAWE,IAAA,eAAe,EAAEiB,kBAXnB;AAAA,2BAaE;AAAG,MAAA,EAAE,EAAC,SAAN;AAAA,6BACE;AAAA,kBAAMlB;AAAN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAbF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAxDD;;GAAMD,S;;KAAAA,S;AA0DN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Popover } from \"antd\";\nimport \"../styles/CellPopOver.css\";\n/**\n * component that renders the popup menu of each cell on tableschedule\n * props:\n * @param {text} : the company name for the cell\n * @param {row}: the row belonging to the company to select the mentor and\n * fetch the cancel action to the backend\n * @returns None\n */\nconst CellPopUp = ({ text }) => {\n  /* Handles the popUp action on the cell table */\n  const [popUp, setPopUp] = useState(false);\n\n  const cancelMeeting = () => {\n    fetch(\n      \"http://localhost:3033/api/meetings\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: jsonData,\n      }\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        /*result is the generated schedule without conflicts*/\n        console.log(result);\n        //setResSchedule(result);\n        //setIsReset(true);\n        /* with this we call the use effect to redirect to other component and clean \n              the actual component */\n        //setFetched(true);\n      })\n      .catch((error) => {\n        // setIsReset(true);\n        //setJsonData(null);\n        console.error(\"Error:\", error);\n      });\n  };\n\n  const handleVisiblePopUp = (visible) => {\n    setPopUp(popUp ? false : true);\n  };\n  return (\n    <Popover\n      content={\n        <div>\n          <a onClick={cancelMeeting}>Cancel Meeting</a>\n          <br />\n          <a onClick={cancelMeeting}>Posible Reschedulings</a>\n        </div>\n      }\n      title=\"Title\"\n      trigger=\"click\"\n      visible={popUp}\n      onVisibleChange={handleVisiblePopUp}\n    >\n      <a id=\"cellPop\">\n        <div>{text}</div>\n      </a>\n    </Popover>\n  );\n};\n\nexport default CellPopUp;\n"]},"metadata":{},"sourceType":"module"}