{"ast":null,"code":"var _jsxFileName = \"/home/omsebas/techstars_heroku/client/src/components/TableResults.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Table } from \"antd\";\nimport { FireFilled } from \"@ant-design/icons\";\nimport ModalBox from \"./ModalBox\"; //import { default as dataResults } from \"../fakeresults.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TableResults(props) {\n  _s();\n\n  const dataResults = [{\n    \"mentor\": \"Adam\"\n  }];\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [rowKey, setRowKey] = useState(0);\n  const [modalContent, setModalContent] = useState({});\n\n  const handleModal = (company, value) => {\n    const mentor = Object.keys(dataResults[rowKey])[0];\n    const resultIndex = dataResults[rowKey][mentor].findIndex(obj => obj.company === company && obj.matchResult === value);\n\n    if (data[rowKey][\"mentorName\"] === mentor && data[rowKey][company] === dataResults[rowKey][mentor][resultIndex].matchResult) {\n      setModalContent(dataResults[rowKey][mentor][resultIndex]);\n    }\n\n    setIsModalVisible(true);\n  };\n\n  const columns = props.company.map(obj => {\n    return {\n      title: obj.company,\n      dataIndex: obj.company,\n      key: obj.company,\n      width: 80,\n      render: value => {\n        if (value !== undefined) {\n          const codeColor = [\"notMatch\", \"willing\", \"goodMatch\", \"strongMatch\", \"perfectMatch\"];\n          let classColor;\n          codeColor.forEach((vote, index) => index === value ? classColor = vote : value === 6 ? classColor = codeColor[4] : null);\n          return /*#__PURE__*/_jsxDEV(FireFilled, {\n            onClick: () => handleModal(obj.company, value),\n            className: classColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this);\n        }\n      },\n      filters: [{\n        text: /*#__PURE__*/_jsxDEV(FireFilled, {\n          className: \"perfectMatch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this),\n        value: \"Perfect\"\n      }, {\n        text: /*#__PURE__*/_jsxDEV(FireFilled, {\n          className: \"strongMatch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this),\n        value: \"Strong\"\n      }, {\n        text: /*#__PURE__*/_jsxDEV(FireFilled, {\n          className: \"goodMatch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this),\n        value: \"Good\"\n      }, {\n        text: /*#__PURE__*/_jsxDEV(FireFilled, {\n          className: \"willing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this),\n        value: \"Willing\"\n      }, {\n        text: /*#__PURE__*/_jsxDEV(FireFilled, {\n          className: \"notMatch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this),\n        value: \"NoMatch\"\n      }, {\n        text: /*#__PURE__*/_jsxDEV(FireFilled, {\n          className: \"pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this),\n        value: \"Pending\"\n      }],\n      onFilter: (value, record) => record.name.indexOf(value) === 0\n    };\n  });\n  columns.unshift({\n    title: \"Mentor / Company\",\n    dataIndex: \"mentorName\",\n    key: \"mentorName\",\n    fixed: \"left\",\n    width: 80,\n    render: value => value\n  });\n\n  const getData = results => {\n    let array = [];\n\n    for (const obj of results) {\n      let mentor = Object.keys(obj)[0];\n      let objfinal = {\n        key: results.indexOf(obj),\n        mentorName: mentor\n      };\n      obj[mentor].forEach((objresult, index) => {\n        objfinal[objresult.company] = objresult.matchResult;\n      });\n      array.push(objfinal);\n    }\n\n    return array;\n  };\n\n  const data = getData(dataResults);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ModalBox, {\n      isModalVisible: isModalVisible,\n      setIsModalVisible: setIsModalVisible,\n      modalContent: modalContent,\n      mentorName: data[rowKey][\"mentorName\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: data,\n      size: \"default\",\n      pagination: false,\n      onRow: record => ({\n        onMouseEnter: () => {\n          setRowKey(record.key);\n        }\n      }),\n      expandable: true,\n      scroll: {\n        x: \"calc(700px + 50%)\",\n        y: 240\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TableResults, \"Z4dou36piNkzjy3idF7M7PTs7bA=\");\n\n_c = TableResults;\nexport default TableResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableResults\");","map":{"version":3,"sources":["/home/omsebas/techstars_heroku/client/src/components/TableResults.jsx"],"names":["React","useState","Table","FireFilled","ModalBox","TableResults","props","dataResults","isModalVisible","setIsModalVisible","rowKey","setRowKey","modalContent","setModalContent","handleModal","company","value","mentor","Object","keys","resultIndex","findIndex","obj","matchResult","data","columns","map","title","dataIndex","key","width","render","undefined","codeColor","classColor","forEach","vote","index","filters","text","onFilter","record","name","indexOf","unshift","fixed","getData","results","array","objfinal","mentorName","objresult","push","onMouseEnter","x","y"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,QAAMC,WAAW,GAAG,CAAC;AAAC,cAAU;AAAX,GAAD,CAApB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMa,WAAW,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACtC,UAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYZ,WAAW,CAACG,MAAD,CAAvB,EAAiC,CAAjC,CAAf;AACA,UAAMU,WAAW,GAAGb,WAAW,CAACG,MAAD,CAAX,CAAoBO,MAApB,EAA4BI,SAA5B,CACjBC,GAAD,IAASA,GAAG,CAACP,OAAJ,KAAgBA,OAAhB,IAA2BO,GAAG,CAACC,WAAJ,KAAoBP,KADtC,CAApB;;AAGA,QACEQ,IAAI,CAACd,MAAD,CAAJ,CAAa,YAAb,MAA+BO,MAA/B,IACAO,IAAI,CAACd,MAAD,CAAJ,CAAaK,OAAb,MACER,WAAW,CAACG,MAAD,CAAX,CAAoBO,MAApB,EAA4BG,WAA5B,EAAyCG,WAH7C,EAIE;AACAV,MAAAA,eAAe,CAACN,WAAW,CAACG,MAAD,CAAX,CAAoBO,MAApB,EAA4BG,WAA5B,CAAD,CAAf;AACD;;AACDX,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAbD;;AAeA,QAAMgB,OAAO,GAAGnB,KAAK,CAACS,OAAN,CAAcW,GAAd,CAAmBJ,GAAD,IAAS;AACzC,WAAO;AACLK,MAAAA,KAAK,EAAEL,GAAG,CAACP,OADN;AAELa,MAAAA,SAAS,EAAEN,GAAG,CAACP,OAFV;AAGLc,MAAAA,GAAG,EAAEP,GAAG,CAACP,OAHJ;AAILe,MAAAA,KAAK,EAAE,EAJF;AAKLC,MAAAA,MAAM,EAAGf,KAAD,IAAW;AACjB,YAAIA,KAAK,KAAKgB,SAAd,EAAyB;AACvB,gBAAMC,SAAS,GAAG,CAChB,UADgB,EAEhB,SAFgB,EAGhB,WAHgB,EAIhB,aAJgB,EAKhB,cALgB,CAAlB;AAOA,cAAIC,UAAJ;AACAD,UAAAA,SAAS,CAACE,OAAV,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAChBA,KAAK,KAAKrB,KAAV,GACKkB,UAAU,GAAGE,IADlB,GAEIpB,KAAK,KAAK,CAAV,GACCkB,UAAU,GAAGD,SAAS,CAAC,CAAD,CADvB,GAEA,IALN;AAOA,8BACE,QAAC,UAAD;AACE,YAAA,OAAO,EAAE,MAAMnB,WAAW,CAACQ,GAAG,CAACP,OAAL,EAAcC,KAAd,CAD5B;AAEE,YAAA,SAAS,EAAEkB;AAFb;AAAA;AAAA;AAAA;AAAA,kBADF;AAMD;AACF,OA7BI;AA8BLI,MAAAA,OAAO,EAAE,CACP;AACEC,QAAAA,IAAI,eAAE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADR;AAEEvB,QAAAA,KAAK,EAAE;AAFT,OADO,EAKP;AACEuB,QAAAA,IAAI,eAAE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADR;AAEEvB,QAAAA,KAAK,EAAE;AAFT,OALO,EASP;AACEuB,QAAAA,IAAI,eAAE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADR;AAEEvB,QAAAA,KAAK,EAAE;AAFT,OATO,EAaP;AACEuB,QAAAA,IAAI,eAAE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADR;AAEEvB,QAAAA,KAAK,EAAE;AAFT,OAbO,EAiBP;AACEuB,QAAAA,IAAI,eAAE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADR;AAEEvB,QAAAA,KAAK,EAAE;AAFT,OAjBO,EAqBP;AACEuB,QAAAA,IAAI,eAAE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADR;AAEEvB,QAAAA,KAAK,EAAE;AAFT,OArBO,CA9BJ;AAwDLwB,MAAAA,QAAQ,EAAE,CAACxB,KAAD,EAAQyB,MAAR,KAAmBA,MAAM,CAACC,IAAP,CAAYC,OAAZ,CAAoB3B,KAApB,MAA+B;AAxDvD,KAAP;AA0DD,GA3De,CAAhB;AA6DAS,EAAAA,OAAO,CAACmB,OAAR,CAAgB;AACdjB,IAAAA,KAAK,EAAE,kBADO;AAEdC,IAAAA,SAAS,EAAE,YAFG;AAGdC,IAAAA,GAAG,EAAE,YAHS;AAIdgB,IAAAA,KAAK,EAAE,MAJO;AAKdf,IAAAA,KAAK,EAAE,EALO;AAMdC,IAAAA,MAAM,EAAGf,KAAD,IAAWA;AANL,GAAhB;;AASA,QAAM8B,OAAO,GAAIC,OAAD,IAAa;AAC3B,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,MAAM1B,GAAX,IAAkByB,OAAlB,EAA2B;AACzB,UAAI9B,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYG,GAAZ,EAAiB,CAAjB,CAAb;AACA,UAAI2B,QAAQ,GAAG;AAAEpB,QAAAA,GAAG,EAAEkB,OAAO,CAACJ,OAAR,CAAgBrB,GAAhB,CAAP;AAA6B4B,QAAAA,UAAU,EAAEjC;AAAzC,OAAf;AACAK,MAAAA,GAAG,CAACL,MAAD,CAAH,CAAYkB,OAAZ,CAAoB,CAACgB,SAAD,EAAYd,KAAZ,KAAsB;AACxCY,QAAAA,QAAQ,CAACE,SAAS,CAACpC,OAAX,CAAR,GAA8BoC,SAAS,CAAC5B,WAAxC;AACD,OAFD;AAGAyB,MAAAA,KAAK,CAACI,IAAN,CAAWH,QAAX;AACD;;AACD,WAAOD,KAAP;AACD,GAXD;;AAaA,QAAMxB,IAAI,GAAGsB,OAAO,CAACvC,WAAD,CAApB;AAEA,sBACE;AAAA,4BACE,QAAC,QAAD;AACE,MAAA,cAAc,EAAEC,cADlB;AAEE,MAAA,iBAAiB,EAAEC,iBAFrB;AAGE,MAAA,YAAY,EAAEG,YAHhB;AAIE,MAAA,UAAU,EAAEY,IAAI,CAACd,MAAD,CAAJ,CAAa,YAAb;AAJd;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,KAAD;AACE,MAAA,OAAO,EAAEe,OADX;AAEE,MAAA,UAAU,EAAED,IAFd;AAGE,MAAA,IAAI,EAAC,SAHP;AAIE,MAAA,UAAU,EAAE,KAJd;AAKE,MAAA,KAAK,EAAGiB,MAAD,KAAa;AAClBY,QAAAA,YAAY,EAAE,MAAM;AAClB1C,UAAAA,SAAS,CAAC8B,MAAM,CAACZ,GAAR,CAAT;AACD;AAHiB,OAAb,CALT;AAUE,MAAA,UAAU,MAVZ;AAWE,MAAA,MAAM,EAAE;AAAEyB,QAAAA,CAAC,EAAE,mBAAL;AAA0BC,QAAAA,CAAC,EAAE;AAA7B;AAXV;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAuBD;;GAjIQlD,Y;;KAAAA,Y;AAkIT,eAAeA,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Table } from \"antd\";\nimport { FireFilled } from \"@ant-design/icons\";\nimport ModalBox from \"./ModalBox\";\n//import { default as dataResults } from \"../fakeresults.json\";\n\nfunction TableResults(props) {\n  const dataResults = [{\"mentor\": \"Adam\"}]\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [rowKey, setRowKey] = useState(0);\n  const [modalContent, setModalContent] = useState({});\n\n  const handleModal = (company, value) => {\n    const mentor = Object.keys(dataResults[rowKey])[0];\n    const resultIndex = dataResults[rowKey][mentor].findIndex(\n      (obj) => obj.company === company && obj.matchResult === value\n    );\n    if (\n      data[rowKey][\"mentorName\"] === mentor &&\n      data[rowKey][company] ===\n        dataResults[rowKey][mentor][resultIndex].matchResult\n    ) {\n      setModalContent(dataResults[rowKey][mentor][resultIndex]);\n    }\n    setIsModalVisible(true);\n  };\n\n  const columns = props.company.map((obj) => {\n    return {\n      title: obj.company,\n      dataIndex: obj.company,\n      key: obj.company,\n      width: 80,\n      render: (value) => {\n        if (value !== undefined) {\n          const codeColor = [\n            \"notMatch\",\n            \"willing\",\n            \"goodMatch\",\n            \"strongMatch\",\n            \"perfectMatch\",\n          ];\n          let classColor;\n          codeColor.forEach((vote, index) =>\n            index === value\n              ? (classColor = vote)\n              : value === 6\n              ? (classColor = codeColor[4])\n              : null\n          );\n          return (\n            <FireFilled\n              onClick={() => handleModal(obj.company, value)}\n              className={classColor}\n            />\n          );\n        }\n      },\n      filters: [\n        {\n          text: <FireFilled className=\"perfectMatch\" />,\n          value: \"Perfect\",\n        },\n        {\n          text: <FireFilled className=\"strongMatch\" />,\n          value: \"Strong\",\n        },\n        {\n          text: <FireFilled className=\"goodMatch\" />,\n          value: \"Good\",\n        },\n        {\n          text: <FireFilled className=\"willing\" />,\n          value: \"Willing\",\n        },\n        {\n          text: <FireFilled className=\"notMatch\" />,\n          value: \"NoMatch\",\n        },\n        {\n          text: <FireFilled className=\"pending\" />,\n          value: \"Pending\",\n        },\n      ],\n      onFilter: (value, record) => record.name.indexOf(value) === 0,\n    };\n  });\n\n  columns.unshift({\n    title: \"Mentor / Company\",\n    dataIndex: \"mentorName\",\n    key: \"mentorName\",\n    fixed: \"left\",\n    width: 80,\n    render: (value) => value,\n  });\n\n  const getData = (results) => {\n    let array = [];\n    for (const obj of results) {\n      let mentor = Object.keys(obj)[0];\n      let objfinal = { key: results.indexOf(obj), mentorName: mentor };\n      obj[mentor].forEach((objresult, index) => {\n        objfinal[objresult.company] = objresult.matchResult;\n      });\n      array.push(objfinal);\n    }\n    return array;\n  };\n\n  const data = getData(dataResults);\n\n  return (\n    <>\n      <ModalBox\n        isModalVisible={isModalVisible}\n        setIsModalVisible={setIsModalVisible}\n        modalContent={modalContent}\n        mentorName={data[rowKey][\"mentorName\"]}\n      />\n      <Table\n        columns={columns}\n        dataSource={data}\n        size=\"default\"\n        pagination={false}\n        onRow={(record) => ({\n          onMouseEnter: () => {\n            setRowKey(record.key);\n          },\n        })}\n        expandable\n        scroll={{ x: \"calc(700px + 50%)\", y: 240 }}\n      />\n    </>\n  );\n}\nexport default TableResults;\n"]},"metadata":{},"sourceType":"module"}