{"ast":null,"code":"var _jsxFileName = \"/home/omsebas/techstars_heroku/client/src/Parts/formAddMentor.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Form, Input, Button, Select, Space } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nconst AddMentor = ({\n  mentors,\n  companies,\n  setReloadMentors\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const submitaddMentor = value => {\n    form.resetFields();\n    let bodyData = JSON.stringify([{\n      mentor: value.mentor,\n      email: value.email,\n      Companies: value.Companies\n    }]);\n    console.log(bodyData);\n    fetch(\"http://localhost:3033/api/mentors\"\n    /* Route to send the CSV file to \n              generate the schedule */\n    , {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: bodyData\n    }).then(response => response.json()).then(result => {\n      alert(\"Mentor Created\");\n      setReloadMentors(true);\n    }).catch(error => {\n      alert(\"Error:\", error);\n    });\n  };\n\n  const listCompanies = companies.map(row => /*#__PURE__*/_jsxDEV(Option, {\n    value: row.company,\n    children: row.company\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Space, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add Mentor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      labelCol: {\n        span: 8\n      },\n      wrapperCol: {\n        span: 14\n      },\n      layout: \"horizontal\",\n      initialValues: {\n        size: \"small\"\n      },\n      onFinish: submitaddMentor,\n      initialValues: {\n        remember: false,\n        preserve: false\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"mentor\",\n        label: \"Mentor Name\",\n        rules: [{\n          required: true,\n          message: \"Please input mentor name!\",\n          whitespace: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        label: \"Mentor Email\",\n        rules: [{\n          required: true,\n          message: \"Please input mentor email!\",\n          whitespace: true\n        }, {\n          type: \"email\",\n          message: \"The input is not valid E-mail!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"emailConfirmation\",\n        label: \"Confirm Mentor Email\",\n        dependencies: [\"email\"],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: \"Please input again the mentor email!\",\n          whitespace: true\n        }, {\n          type: \"email\",\n          message: \"The input is not valid E-mail!\"\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue(\"email\") === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(new Error(\"The two emails that you entered do not match!\"));\n          }\n\n        })],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"Companies\",\n        label: \"Select Companies\",\n        rules: [{\n          required: true,\n          message: \"Please input at least one company!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          mode: \"multiple\",\n          children: listCompanies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        style: {\n          paddingLeft: 162\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddMentor, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = AddMentor;\nexport default AddMentor;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMentor\");","map":{"version":3,"sources":["/home/omsebas/techstars_heroku/client/src/Parts/formAddMentor.jsx"],"names":["React","Form","Input","Button","Select","Space","Option","AddMentor","mentors","companies","setReloadMentors","form","useForm","submitaddMentor","value","resetFields","bodyData","JSON","stringify","mentor","email","Companies","console","log","fetch","method","headers","Accept","body","then","response","json","result","alert","catch","error","listCompanies","map","row","company","span","size","remember","preserve","required","message","whitespace","type","getFieldValue","validator","_","Promise","resolve","reject","Error","paddingLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, Button, Select, Space } from \"antd\";\nconst { Option } = Select;\n\nconst AddMentor = ({ mentors, companies, setReloadMentors }) => {\n  const [form] = Form.useForm();\n  const submitaddMentor = (value) => {\n    form.resetFields();\n    let bodyData = JSON.stringify([\n      { mentor: value.mentor, email: value.email, Companies: value.Companies },\n    ]);\n    console.log(bodyData);\n    fetch(\n      \"http://localhost:3033/api/mentors\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: bodyData,\n      }\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        alert(\"Mentor Created\");\n        setReloadMentors(true);\n      })\n      .catch((error) => {\n        alert(\"Error:\", error);\n      });\n  };\n\n  const listCompanies = companies.map((row) => (\n    <Option value={row.company}>{row.company}</Option>\n  ));\n\n  return (\n    <>\n      <Space>\n        <h1>Add Mentor</h1>\n      </Space>\n      <Form\n        form={form}\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 14,\n        }}\n        layout=\"horizontal\"\n        initialValues={{\n          size: \"small\",\n        }}\n        onFinish={submitaddMentor}\n        initialValues={{\n          remember: false,\n          preserve: false,\n        }}\n      >\n        <Form.Item\n          name=\"mentor\"\n          label=\"Mentor Name\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input mentor name!\",\n              whitespace: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          label=\"Mentor Email\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input mentor email!\",\n              whitespace: true,\n            },\n            {\n              type: \"email\",\n              message: \"The input is not valid E-mail!\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"emailConfirmation\"\n          label=\"Confirm Mentor Email\"\n          dependencies={[\"email\"]}\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: \"Please input again the mentor email!\",\n              whitespace: true,\n            },\n            {\n              type: \"email\",\n              message: \"The input is not valid E-mail!\",\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue(\"email\") === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject(\n                  new Error(\"The two emails that you entered do not match!\")\n                );\n              },\n            }),\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"Companies\"\n          label=\"Select Companies\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input at least one company!\",\n            },\n          ]}\n        >\n          <Select mode=\"multiple\">{listCompanies}</Select>\n        </Form.Item>\n        <Form.Item style={{ paddingLeft: 162 }}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default AddMentor;\n"]},"metadata":{},"sourceType":"module"}