{"ast":null,"code":"var _jsxFileName = \"/home/omsebas/techstars_app_results/client/src/components/TableSchedule.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Space, Select } from \"antd\";\nimport { CSVDownloader, jsonToCSV } from \"react-papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n/*axios\n  .get('https://techstars-api.herokuapp.com/api/schedule')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  });*/\n\nconst companies = JSON.parse('[{\"company_id\":\"25a69721-6a3f-4165-8cfa-3f6651489368\",\"company\":\"Avengers Inc\",\"email\":\"avengers@example.com\"},{\"company_id\":\"cdf0ce2b-82e3-4473-bde1-3724a660a35d\",\"company\":\"Pied Piper\",\"email\":\"pied@example.com\"},{\"company_id\":\"4a3d7293-ab39-4c6a-adc8-d8a2f77202c4\",\"company\":\"SHIELD\",\"email\":\"shield@example.com\"},{\"company_id\":\"940ed1f7-75d3-4f0f-9583-d4004cc77100\",\"company\":\"Acme\",\"email\":\"acme@example.com\"},{\"company_id\":\"d1322d8d-42d6-4e8b-aad5-2d83ec16ea18\",\"company\":\"Wayne Industries\",\"email\":\"wayne@example.com\"},{\"company_id\":\"9517b8bd-ca54-4f0c-b552-ed7f340a766b\",\"company\":\"X Men\",\"email\":\"xmen@example.com\"},{\"company_id\":\"c4496c7f-73a2-4276-bf73-b23ab6506ad2\",\"company\":\"Xavier Corp\",\"email\":\"xavier@example.com\"},{\"company_id\":\"19a3a0e5-e4d8-4141-8b13-ac22de8681ed\",\"company\":\"Marvel\",\"email\":\"marvel@example.com\"},{\"company_id\":\"07933870-01e1-46d5-8aea-8df52ae581e9\",\"company\":\"Justice League\",\"email\":\"justice@example.com\"},{\"company_id\":\"a0d41081-93ae-47cc-bda4-d69e1a22f25c\",\"company\":\"Umbrella Corp\",\"email\":\"umbrella@example.com\"},{\"company_id\":\"6b5dcf36-0771-4104-bdc8-a31ad96507f0\",\"company\":\"Olympus\",\"email\":\"olympus@example.com\"}]');\nconst colors = [\"#483D8B\", \"#8FBC8F\", \"#E9967A\", \"#8B0000\", \"#9932CC\", \"#FF8C00\", \"#4B0082\", \"#008000\", \"#808080\", \"#c9db00\", \"#008080\"];\nconst list_comp = companies.map(obj => {\n  return obj.company;\n});\nconst list_comp_colors = list_comp.map((comp, index) => {\n  let col = colors[index];\n  return {\n    company: comp,\n    color: col\n  };\n});\nconsole.log(list_comp_colors);\n/* This function is in charge to color format every cell on the schedule table according to the company */\n\nfunction cell_color(text) {\n  if (text !== null) {\n    var _color$;\n\n    let color = list_comp_colors.filter(obj => {\n      return obj.company === text;\n    });\n    let col_row;\n    col_row = color ? (_color$ = color[0]) === null || _color$ === void 0 ? void 0 : _color$.color : \"#FFFFFF\";\n    return {\n      props: {\n        style: {\n          backgroundColor: col_row,\n          borderRadius: \"10px\",\n          bordered: \"10px\"\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    };\n  } else {\n    return {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 24\n      }, this)\n    };\n  }\n}\n/**\n * TableSchedule is the component to generate the data table for the schedule.\n * @resSchedule: is the information retrieved form the back-end to generate the scheduling table.\n */\n\n\nconst TableSchedule = ({\n  resSchedule\n}) => {\n  _s();\n\n  /* block handles the state of the column tables to be rendered */\n  const [block, setBlock] = useState(\"AM\");\n  /* filteredInfo handles the mentors and days to be filtered */\n\n  const [filteredInfo, setFilteredInfo] = useState({});\n  /* sortedInfo handles the information for sorting the mentor column */\n\n  const [sortedInfo, setSortedInfo] = useState({});\n  /* Generate the two datasets for the AM and PM tables */\n\n  const dataFilterAM = resSchedule.filter(row => row.Block === \"AM\");\n  const dataFilterPM = resSchedule.filter(row => row.Block === \"PM\");\n  /* Generate the download file */\n\n  const dataFilterAMPop = dataFilterAM.map(obj => {\n    delete obj[\"Slots\"];\n    return obj;\n  });\n  const dataFilterPMPop = dataFilterPM.map(obj => {\n    delete obj[\"Slots\"];\n    return obj;\n  });\n  const download = jsonToCSV(JSON.stringify(dataFilterAMPop)) + \"\\n\\n\\n\\n\" + jsonToCSV(JSON.stringify(dataFilterPMPop));\n  /* Wrangling the recieved data to generate the list to filter the mentors ans the days*/\n\n  const mentor_am_filter = resSchedule.filter(obj => {\n    return obj.Block === \"AM\";\n  });\n  const mentor_am = mentor_am_filter.map(obj => {\n    return {\n      text: obj.Mentor,\n      value: obj.Mentor\n    };\n  });\n  const mentor_pm_filter = resSchedule.filter(obj => {\n    return obj.Block === \"PM\";\n  });\n  const mentor_pm = mentor_pm_filter.map(obj => {\n    return {\n      text: obj.Mentor,\n      value: obj.Mentor\n    };\n  });\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n  const days_filter = days.map(day => {\n    return {\n      text: day,\n      value: day\n    };\n  });\n  /* Handle the change on the filter and sorters components */\n\n  const handleChange = (pagination, filters, sorter) => {\n    console.log(\"Various parameters\", pagination, filters, sorter);\n    setFilteredInfo(filters);\n    setSortedInfo(sorter);\n  };\n  /* Description of the columns for the AM block table*/\n\n\n  const AM = [{\n    title: \"Mentor\",\n    dataIndex: \"Mentor\",\n    key: \"Mentor\",\n    filters: mentor_am.sort(function (a, b) {\n      let nameA = a.text.toUpperCase(); // ignore upper and lowercase\n\n      let nameB = b.text.toUpperCase(); // ignore upper and lowercase\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      } // names must be equal\n\n\n      return 0;\n    }),\n    sorter: (a, b) => {\n      let nameA = a.Mentor.toUpperCase(); // ignore upper and lowercase\n\n      let nameB = b.Mentor.toUpperCase(); // ignore upper and lowercase\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      } // names must be equal\n\n\n      return 0;\n    },\n    sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n    filteredValue: (filteredInfo === null || filteredInfo === void 0 ? void 0 : filteredInfo.Mentor) || null,\n    onFilter: (value, record) => record.Mentor.indexOf(value) === 0,\n    width: 150,\n    background: \"#FFFFFF\",\n    fixed: \"left\",\n    align: \"left\"\n  }, {\n    title: \"Day\",\n    dataIndex: \"Day\",\n    key: \"Day\",\n    filters: days_filter,\n    filteredValue: (filteredInfo === null || filteredInfo === void 0 ? void 0 : filteredInfo.Day) || null,\n    onFilter: (value, record) => record.Day.indexOf(value) === 0,\n    width: 100,\n    fixed: \"left\",\n    align: \"left\"\n  }, {\n    title: \"08:00\",\n    dataIndex: \"08:00:00\",\n    key: \"08:00:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"08:20\",\n    dataIndex: \"08:20:00\",\n    key: \"08:20:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"08:40\",\n    dataIndex: \"08:40:00\",\n    key: \"08:40:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"09:00\",\n    dataIndex: \"09:00:00\",\n    key: \"09:00:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"09:20\",\n    dataIndex: \"09:20:00\",\n    key: \"09:20:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"09:40\",\n    dataIndex: \"09:40:00\",\n    key: \"09:40:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"10:00\",\n    dataIndex: \"10:00:00\",\n    key: \"10:00:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"10:20\",\n    dataIndex: \"10:20:00\",\n    key: \"10:20\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"10:40\",\n    dataIndex: \"10:40:00\",\n    key: \"10:40:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"11:00\",\n    dataIndex: \"11:00:00\",\n    key: \"11:00:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"11:20\",\n    dataIndex: \"11:20:00\",\n    key: \"11:20:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"11:40\",\n    dataIndex: \"11:40:00\",\n    key: \"11:40:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }];\n  /* Description of the Columns for the PM block table */\n\n  const PM = [{\n    title: \"Mentor\",\n    dataIndex: \"Mentor\",\n    key: \"Mentor\",\n    filters: mentor_pm.sort(function (a, b) {\n      var nameA = a.text.toUpperCase(); // ignore upper and lowercase\n\n      var nameB = b.text.toUpperCase(); // ignore upper and lowercase\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      } // names must be equal\n\n\n      return 0;\n    }),\n    sorter: (a, b) => {\n      let nameA = a.Mentor.toUpperCase(); // ignore upper and lowercase\n\n      let nameB = b.Mentor.toUpperCase(); // ignore upper and lowercase\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      } // names must be equal\n\n\n      return 0;\n    },\n    sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n    filteredValue: (filteredInfo === null || filteredInfo === void 0 ? void 0 : filteredInfo.Mentor) || null,\n    onFilter: (value, record) => record.Mentor.indexOf(value) === 0,\n    sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n    width: 150,\n    fixed: \"left\",\n    align: \"left\"\n  }, {\n    title: \"Day\",\n    dataIndex: \"Day\",\n    key: \"Day\",\n    filters: days_filter,\n    filteredValue: (filteredInfo === null || filteredInfo === void 0 ? void 0 : filteredInfo.Day) || null,\n    onFilter: (value, record) => record.Day.indexOf(value) === 0,\n    width: 100,\n    fixed: \"left\",\n    align: \"left\"\n  }, {\n    title: \"13:00\",\n    dataIndex: \"13:10:00\",\n    key: \"13:10:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"13:20\",\n    dataIndex: \"13:30:00\",\n    key: \"13:30:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"13:40\",\n    dataIndex: \"13:50:00\",\n    key: \"13:50:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"14:00\",\n    dataIndex: \"14:10:00\",\n    key: \"14:00:10\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"14:20\",\n    dataIndex: \"14:30:00\",\n    key: \"14:30:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"14:40\",\n    dataIndex: \"14:50:00\",\n    key: \"14:50:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"15:00\",\n    dataIndex: \"15:10:00\",\n    key: \"15:10:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"15:20\",\n    dataIndex: \"15:30:00\",\n    key: \"15:30:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"15:40\",\n    dataIndex: \"15:50:00\",\n    key: \"15:50:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"16:00\",\n    dataIndex: \"16:10:00\",\n    key: \"16:10:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"16:20\",\n    dataIndex: \"16:30:00\",\n    key: \"16:30:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }, {\n    title: \"16:40\",\n    dataIndex: \"16:50:00\",\n    key: \"16:50:00\",\n\n    render(text) {\n      return cell_color(text);\n    },\n\n    align: \"center\",\n    width: 130\n  }];\n  /* Handles the clear for the filters */\n\n  const clearFilters = () => {\n    setFilteredInfo(null);\n  };\n  /* render the button download if the data is available */\n\n\n  const renderDownload = () => {\n    if (resSchedule.length > 0) {\n      return /*#__PURE__*/_jsxDEV(CSVDownloader, {\n        className: \"downloadBtn\",\n        data: download,\n        type: \"button\",\n        filename: \"schedule\",\n        style: {\n          color: \"#fff\",\n          backgroundColor: \"#39C463\",\n          borderRadius: \"5px\",\n          height: 32,\n          borderColor: \"#39C463\",\n          width: 110,\n          disable: true\n        },\n        bom: true,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /* handles the display of the AM and PM tables */\n\n\n  const handleBlock = value => {\n    setBlock(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Space, {\n      style: {\n        marginBottom: 16,\n        marginLeft: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Select Block:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        defaultValue: \"AM\",\n        style: {\n          width: 110\n        },\n        onChange: handleBlock,\n        children: [/*#__PURE__*/_jsxDEV(Option, {\n          value: \"AM\",\n          children: \"AM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"PM\",\n          children: \"PM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clearFilters,\n        children: \"Clear filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), renderDownload()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      className: \"ant-table-layout-fixed\",\n      style: {\n        marginBottom: 5\n      },\n      bordered: true,\n      pagination: {\n        pageSize: 50\n      },\n      scroll: {\n        x: \"max-content\"\n      },\n      size: \"small\",\n      columns: block === \"AM\" ? AM : PM,\n      sticky: true,\n      dataSource: block === \"AM\" ? dataFilterAM : dataFilterPM,\n      onChange: handleChange,\n      rowKey: record => record.uid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TableSchedule, \"mrJPAqwkSlBZ5iXRQj0SOlNFvSo=\");\n\n_c = TableSchedule;\nexport default TableSchedule;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableSchedule\");","map":{"version":3,"sources":["/home/omsebas/techstars_app_results/client/src/components/TableSchedule.jsx"],"names":["React","useState","useEffect","axios","Table","Button","Space","Select","CSVDownloader","jsonToCSV","Option","companies","JSON","parse","colors","list_comp","map","obj","company","list_comp_colors","comp","index","col","color","console","log","cell_color","text","filter","col_row","props","style","backgroundColor","borderRadius","bordered","children","TableSchedule","resSchedule","block","setBlock","filteredInfo","setFilteredInfo","sortedInfo","setSortedInfo","dataFilterAM","row","Block","dataFilterPM","dataFilterAMPop","dataFilterPMPop","download","stringify","mentor_am_filter","mentor_am","Mentor","value","mentor_pm_filter","mentor_pm","days","days_filter","day","handleChange","pagination","filters","sorter","AM","title","dataIndex","key","sort","a","b","nameA","toUpperCase","nameB","sortOrder","columnKey","order","filteredValue","onFilter","record","indexOf","width","background","fixed","align","Day","render","PM","clearFilters","renderDownload","length","height","borderColor","disable","handleBlock","marginBottom","marginLeft","pageSize","x","uid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Space, Select } from \"antd\";\nimport { CSVDownloader, jsonToCSV } from \"react-papaparse\";\nconst { Option } = Select;\n\n/*axios\n  .get('https://techstars-api.herokuapp.com/api/schedule')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  });*/\n\nconst companies = JSON.parse(\n  '[{\"company_id\":\"25a69721-6a3f-4165-8cfa-3f6651489368\",\"company\":\"Avengers Inc\",\"email\":\"avengers@example.com\"},{\"company_id\":\"cdf0ce2b-82e3-4473-bde1-3724a660a35d\",\"company\":\"Pied Piper\",\"email\":\"pied@example.com\"},{\"company_id\":\"4a3d7293-ab39-4c6a-adc8-d8a2f77202c4\",\"company\":\"SHIELD\",\"email\":\"shield@example.com\"},{\"company_id\":\"940ed1f7-75d3-4f0f-9583-d4004cc77100\",\"company\":\"Acme\",\"email\":\"acme@example.com\"},{\"company_id\":\"d1322d8d-42d6-4e8b-aad5-2d83ec16ea18\",\"company\":\"Wayne Industries\",\"email\":\"wayne@example.com\"},{\"company_id\":\"9517b8bd-ca54-4f0c-b552-ed7f340a766b\",\"company\":\"X Men\",\"email\":\"xmen@example.com\"},{\"company_id\":\"c4496c7f-73a2-4276-bf73-b23ab6506ad2\",\"company\":\"Xavier Corp\",\"email\":\"xavier@example.com\"},{\"company_id\":\"19a3a0e5-e4d8-4141-8b13-ac22de8681ed\",\"company\":\"Marvel\",\"email\":\"marvel@example.com\"},{\"company_id\":\"07933870-01e1-46d5-8aea-8df52ae581e9\",\"company\":\"Justice League\",\"email\":\"justice@example.com\"},{\"company_id\":\"a0d41081-93ae-47cc-bda4-d69e1a22f25c\",\"company\":\"Umbrella Corp\",\"email\":\"umbrella@example.com\"},{\"company_id\":\"6b5dcf36-0771-4104-bdc8-a31ad96507f0\",\"company\":\"Olympus\",\"email\":\"olympus@example.com\"}]'\n);\nconst colors = [\n  \"#483D8B\",\n  \"#8FBC8F\",\n  \"#E9967A\",\n  \"#8B0000\",\n  \"#9932CC\",\n  \"#FF8C00\",\n  \"#4B0082\",\n  \"#008000\",\n  \"#808080\",\n  \"#c9db00\",\n  \"#008080\",\n];\nconst list_comp = companies.map((obj) => {\n  return obj.company;\n});\nconst list_comp_colors = list_comp.map((comp, index) => {\n  let col = colors[index];\n  return { company: comp, color: col };\n});\nconsole.log(list_comp_colors);\n\n/* This function is in charge to color format every cell on the schedule table according to the company */\nfunction cell_color(text) {\n  if (text !== null) {\n    let color = list_comp_colors.filter((obj) => {\n      return obj.company === text;\n    });\n    let col_row;\n    col_row = color ? color[0]?.color : \"#FFFFFF\";\n    return {\n      props: {\n        style: {\n          backgroundColor: col_row,\n          borderRadius: \"10px\",\n          bordered: \"10px\",\n        },\n      },\n      children: <div>{text}</div>,\n    };\n  } else {\n    return { children: <div>{text}</div> };\n  }\n}\n\n/**\n * TableSchedule is the component to generate the data table for the schedule.\n * @resSchedule: is the information retrieved form the back-end to generate the scheduling table.\n */\nconst TableSchedule = ({ resSchedule }) => {\n  /* block handles the state of the column tables to be rendered */\n  const [block, setBlock] = useState(\"AM\");\n  /* filteredInfo handles the mentors and days to be filtered */\n  const [filteredInfo, setFilteredInfo] = useState({});\n  /* sortedInfo handles the information for sorting the mentor column */\n  const [sortedInfo, setSortedInfo] = useState({});\n  /* Generate the two datasets for the AM and PM tables */\n  const dataFilterAM = resSchedule.filter((row) => row.Block === \"AM\");\n  const dataFilterPM = resSchedule.filter((row) => row.Block === \"PM\");\n  /* Generate the download file */\n  const dataFilterAMPop = dataFilterAM.map((obj) => {\n    delete obj[\"Slots\"];\n    return obj;\n  });\n  const dataFilterPMPop = dataFilterPM.map((obj) => {\n    delete obj[\"Slots\"];\n    return obj;\n  });\n  const download =\n    jsonToCSV(JSON.stringify(dataFilterAMPop)) +\n    \"\\n\\n\\n\\n\" +\n    jsonToCSV(JSON.stringify(dataFilterPMPop));\n\n  /* Wrangling the recieved data to generate the list to filter the mentors ans the days*/\n  const mentor_am_filter = resSchedule.filter((obj) => {\n    return obj.Block === \"AM\";\n  });\n  const mentor_am = mentor_am_filter.map((obj) => {\n    return { text: obj.Mentor, value: obj.Mentor };\n  });\n  const mentor_pm_filter = resSchedule.filter((obj) => {\n    return obj.Block === \"PM\";\n  });\n  const mentor_pm = mentor_pm_filter.map((obj) => {\n    return { text: obj.Mentor, value: obj.Mentor };\n  });\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n  const days_filter = days.map((day) => {\n    return { text: day, value: day };\n  });\n  /* Handle the change on the filter and sorters components */\n  const handleChange = (pagination, filters, sorter) => {\n    console.log(\"Various parameters\", pagination, filters, sorter);\n    setFilteredInfo(filters);\n    setSortedInfo(sorter);\n  };\n\n  /* Description of the columns for the AM block table*/\n  const AM = [\n    {\n      title: \"Mentor\",\n      dataIndex: \"Mentor\",\n      key: \"Mentor\",\n      filters: mentor_am.sort(function (a, b) {\n        let nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.Mentor.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.Mentor.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n      onFilter: (value, record) => record.Mentor.indexOf(value) === 0,\n      width: 150,\n      background: \"#FFFFFF\",\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"Day\",\n      dataIndex: \"Day\",\n      key: \"Day\",\n      filters: days_filter,\n      filteredValue: filteredInfo?.Day || null,\n      onFilter: (value, record) => record.Day.indexOf(value) === 0,\n      width: 100,\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"08:00\",\n      dataIndex: \"08:00:00\",\n      key: \"08:00:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"08:20\",\n      dataIndex: \"08:20:00\",\n      key: \"08:20:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"08:40\",\n      dataIndex: \"08:40:00\",\n      key: \"08:40:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"09:00\",\n      dataIndex: \"09:00:00\",\n      key: \"09:00:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"09:20\",\n      dataIndex: \"09:20:00\",\n      key: \"09:20:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"09:40\",\n      dataIndex: \"09:40:00\",\n      key: \"09:40:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"10:00\",\n      dataIndex: \"10:00:00\",\n      key: \"10:00:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"10:20\",\n      dataIndex: \"10:20:00\",\n      key: \"10:20\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"10:40\",\n      dataIndex: \"10:40:00\",\n      key: \"10:40:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"11:00\",\n      dataIndex: \"11:00:00\",\n      key: \"11:00:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"11:20\",\n      dataIndex: \"11:20:00\",\n      key: \"11:20:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"11:40\",\n      dataIndex: \"11:40:00\",\n      key: \"11:40:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n  ];\n\n  /* Description of the Columns for the PM block table */\n  const PM = [\n    {\n      title: \"Mentor\",\n      dataIndex: \"Mentor\",\n      key: \"Mentor\",\n      filters: mentor_pm.sort(function (a, b) {\n        var nameA = a.text.toUpperCase(); // ignore upper and lowercase\n        var nameB = b.text.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n\n        // names must be equal\n        return 0;\n      }),\n      sorter: (a, b) => {\n        let nameA = a.Mentor.toUpperCase(); // ignore upper and lowercase\n        let nameB = b.Mentor.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      },\n      sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n      filteredValue: filteredInfo?.Mentor || null,\n      onFilter: (value, record) => record.Mentor.indexOf(value) === 0,\n      sortOrder: sortedInfo.columnKey === \"Mentor\" && sortedInfo.order,\n      width: 150,\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"Day\",\n      dataIndex: \"Day\",\n      key: \"Day\",\n      filters: days_filter,\n      filteredValue: filteredInfo?.Day || null,\n      onFilter: (value, record) => record.Day.indexOf(value) === 0,\n      width: 100,\n      fixed: \"left\",\n      align: \"left\",\n    },\n    {\n      title: \"13:00\",\n      dataIndex: \"13:10:00\",\n      key: \"13:10:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"13:20\",\n      dataIndex: \"13:30:00\",\n      key: \"13:30:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"13:40\",\n      dataIndex: \"13:50:00\",\n      key: \"13:50:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"14:00\",\n      dataIndex: \"14:10:00\",\n      key: \"14:00:10\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"14:20\",\n      dataIndex: \"14:30:00\",\n      key: \"14:30:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"14:40\",\n      dataIndex: \"14:50:00\",\n      key: \"14:50:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"15:00\",\n      dataIndex: \"15:10:00\",\n      key: \"15:10:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"15:20\",\n      dataIndex: \"15:30:00\",\n      key: \"15:30:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"15:40\",\n      dataIndex: \"15:50:00\",\n      key: \"15:50:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"16:00\",\n      dataIndex: \"16:10:00\",\n      key: \"16:10:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"16:20\",\n      dataIndex: \"16:30:00\",\n      key: \"16:30:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n    {\n      title: \"16:40\",\n      dataIndex: \"16:50:00\",\n      key: \"16:50:00\",\n      render(text) {\n        return cell_color(text);\n      },\n      align: \"center\",\n      width: 130,\n    },\n  ];\n  /* Handles the clear for the filters */\n  const clearFilters = () => {\n    setFilteredInfo(null);\n  };\n  /* render the button download if the data is available */\n  const renderDownload = () => {\n    if (resSchedule.length > 0) {\n      return (\n        <CSVDownloader\n          className=\"downloadBtn\"\n          data={download}\n          type=\"button\"\n          filename={\"schedule\"}\n          style={{\n            color: \"#fff\",\n            backgroundColor: \"#39C463\",\n            borderRadius: \"5px\",\n            height: 32,\n            borderColor: \"#39C463\",\n            width: 110,\n            disable: true,\n          }}\n          bom={true}\n        >\n          Download\n        </CSVDownloader>\n      );\n    }\n  };\n\n  /* handles the display of the AM and PM tables */\n  const handleBlock = (value) => {\n    setBlock(value);\n  };\n\n  return (\n    <>\n      <Space style={{ marginBottom: 16, marginLeft: 20 }}>\n        <span>Select Block:</span>\n        <Select defaultValue=\"AM\" style={{ width: 110 }} onChange={handleBlock}>\n          <Option value=\"AM\">AM</Option>\n          <Option value=\"PM\">PM</Option>\n        </Select>\n        <Button onClick={clearFilters}>Clear filters</Button>\n        {renderDownload()}\n      </Space>\n      <Table\n        className=\"ant-table-layout-fixed\"\n        style={{ marginBottom: 5 }}\n        bordered\n        pagination={{ pageSize: 50 }}\n        scroll={{ x: \"max-content\" }}\n        size=\"small\"\n        columns={block === \"AM\" ? AM : PM}\n        sticky\n        dataSource={block === \"AM\" ? dataFilterAM : dataFilterPM}\n        onChange={handleChange}\n        rowKey={(record) => record.uid}\n      />\n    </>\n  );\n};\n\nexport default TableSchedule;\n"]},"metadata":{},"sourceType":"module"}