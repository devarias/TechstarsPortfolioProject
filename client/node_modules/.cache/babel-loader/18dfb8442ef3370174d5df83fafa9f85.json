{"ast":null,"code":"var _jsxFileName = \"/home/omsebas/techstars_heroku/client/src/Parts/formAddMentor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Input, Button, Select, Space } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nconst AddMentor = ({\n  mentors,\n  companies,\n  setReloadMentors\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const submitaddMentor = value => {\n    form.resetFields();\n    let bodyData = JSON.stringify([{\n      \"mentor\": value.mentor,\n      \"email\": value.email,\n      \"Companies\": value.Companies\n    }]);\n    console.log(bodyData);\n    fetch(\"http://localhost:3033/api/mentors\"\n    /* Route to send the CSV file to \n          generate the schedule */\n    , {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: bodyData\n    }).then(response => response.json()).then(result => {\n      alert('Mentor Created');\n      setReloadMentors(true);\n    }).catch(error => {\n      alert(\"Error:\", error);\n    });\n  };\n\n  const listCompanies = companies.map(row => /*#__PURE__*/_jsxDEV(Option, {\n    value: row.company,\n    children: row.company\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 49\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Space, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add Mentor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      labelCol: {\n        span: 8\n      },\n      wrapperCol: {\n        span: 14\n      },\n      layout: \"horizontal\",\n      initialValues: {\n        size: 'small'\n      },\n      onFinish: submitaddMentor,\n      initialValues: {\n        remember: false,\n        preserve: false\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"mentor\",\n        label: \"Mentor Name\",\n        rules: [{\n          required: true,\n          message: 'Please input mentor name!',\n          whitespace: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        label: \"Mentor Email\",\n        rules: [{\n          required: true,\n          message: 'Please input mentor email!',\n          whitespace: true\n        }, {\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"emailConfirmation\",\n        label: \"Confirm Mentor Email\",\n        dependencies: ['email'],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: 'Please input again the mentor email!',\n          whitespace: true\n        }, {\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('email') === value) {\n              return Promise.resolve();\n            }\n\n            return Promise.reject(new Error('The two emails that you entered do not match!'));\n          }\n\n        })],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"Companies\",\n        label: \"Select Companies\",\n        rules: [{\n          required: true,\n          message: 'Please input at least one company!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          mode: \"multiple\",\n          children: listCompanies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        style: {\n          paddingLeft: 162\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddMentor, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = AddMentor;\nexport default AddMentor;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMentor\");","map":{"version":3,"sources":["/home/omsebas/techstars_heroku/client/src/Parts/formAddMentor.jsx"],"names":["React","useState","Form","Input","Button","Select","Space","Option","AddMentor","mentors","companies","setReloadMentors","form","useForm","submitaddMentor","value","resetFields","bodyData","JSON","stringify","mentor","email","Companies","console","log","fetch","method","headers","Accept","body","then","response","json","result","alert","catch","error","listCompanies","map","row","company","span","size","remember","preserve","required","message","whitespace","type","getFieldValue","validator","_","Promise","resolve","reject","Error","paddingLeft"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,IADF,EAEEC,KAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,KALF,QAMO,MANP;;;AAOA,MAAM;AAAEC,EAAAA;AAAF,IAAaF,MAAnB;;AAEA,MAAMG,SAAS,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,SAAV;AAAqBC,EAAAA;AAArB,CAAD,KAA4C;AAAA;;AAC5D,QAAM,CAACC,IAAD,IAASV,IAAI,CAACW,OAAL,EAAf;;AACA,QAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCH,IAAAA,IAAI,CAACI,WAAL;AACA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe,CAAC;AAAC,gBAAUJ,KAAK,CAACK,MAAjB;AAAyB,eAASL,KAAK,CAACM,KAAxC;AAA+C,mBAAaN,KAAK,CAACO;AAAlE,KAAD,CAAf,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAQ,IAAAA,KAAK,CACC;AAAoC;AAC9C;AAFS,MAGC;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAFX;AAMEC,MAAAA,IAAI,EAAEZ;AANR,KAHD,CAAL,CAYOa,IAZP,CAYaC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAZ1B,EAaOF,IAbP,CAaaG,MAAD,IAAY;AACdC,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACAvB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,KAhBP,EAiBOwB,KAjBP,CAiBcC,KAAD,IAAW;AAChBF,MAAAA,KAAK,CAAC,QAAD,EAAWE,KAAX,CAAL;AACD,KAnBP;AAoBD,GAxBD;;AA0BA,QAAMC,aAAa,GAAG3B,SAAS,CAAC4B,GAAV,CAAeC,GAAD,iBAAU,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAEA,GAAG,CAACC,OAAnB;AAAA,cAA6BD,GAAG,CAACC;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAxB,CAAtB;AAGA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAA,6BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AACE,MAAA,IAAI,EAAE5B,IADR;AAEE,MAAA,QAAQ,EAAE;AACR6B,QAAAA,IAAI,EAAE;AADE,OAFZ;AAKE,MAAA,UAAU,EAAE;AACVA,QAAAA,IAAI,EAAE;AADI,OALd;AAQE,MAAA,MAAM,EAAC,YART;AASE,MAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAE;AADO,OATjB;AAYE,MAAA,QAAQ,EAAE5B,eAZZ;AAaE,MAAA,aAAa,EAAE;AACf6B,QAAAA,QAAQ,EAAE,KADK;AAEfC,QAAAA,QAAQ,EAAE;AAFK,OAbjB;AAAA,8BAkBE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,IAAI,EAAC,QAAhB;AAAyB,QAAA,KAAK,EAAC,aAA/B;AAA6C,QAAA,KAAK,EAAE,CAClD;AACEC,UAAAA,QAAQ,EAAE,IADZ;AAEEC,UAAAA,OAAO,EAAE,2BAFX;AAGEC,UAAAA,UAAU,EAAE;AAHd,SADkD,CAApD;AAAA,+BAOE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,cAlBF,eA2BE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,IAAI,EAAC,OAAhB;AAAwB,QAAA,KAAK,EAAC,cAA9B;AACA,QAAA,KAAK,EAAE,CACL;AACEF,UAAAA,QAAQ,EAAE,IADZ;AAEEC,UAAAA,OAAO,EAAE,4BAFX;AAGEC,UAAAA,UAAU,EAAE;AAHd,SADK,EAML;AACEC,UAAAA,IAAI,EAAE,OADR;AAEEF,UAAAA,OAAO,EAAE;AAFX,SANK,CADP;AAAA,+BAYE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,cA3BF,eAyCE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,IAAI,EAAC,mBAAhB;AAAoC,QAAA,KAAK,EAAC,sBAA1C;AACA,QAAA,YAAY,EAAE,CAAC,OAAD,CADd;AAEA,QAAA,WAAW,MAFX;AAGA,QAAA,KAAK,EAAE,CACL;AACED,UAAAA,QAAQ,EAAE,IADZ;AAEEC,UAAAA,OAAO,EAAE,sCAFX;AAGEC,UAAAA,UAAU,EAAE;AAHd,SADK,EAML;AACEC,UAAAA,IAAI,EAAE,OADR;AAEEF,UAAAA,OAAO,EAAE;AAFX,SANK,EAUL,CAAC;AAAEG,UAAAA;AAAF,SAAD,MAAwB;AACtBC,UAAAA,SAAS,CAACC,CAAD,EAAIpC,KAAJ,EAAW;AAClB,gBAAI,CAACA,KAAD,IAAUkC,aAAa,CAAC,OAAD,CAAb,KAA2BlC,KAAzC,EAAgD;AAC9C,qBAAOqC,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,mBAAOD,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAU,+CAAV,CAAf,CAAP;AACD;;AAPqB,SAAxB,CAVK,CAHP;AAAA,+BAuBE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAvBF;AAAA;AAAA;AAAA;AAAA,cAzCF,eAkEE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,IAAI,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,kBAAlC;AAAqD,QAAA,KAAK,EAAE,CAC1D;AACEV,UAAAA,QAAQ,EAAE,IADZ;AAEEC,UAAAA,OAAO,EAAE;AAFX,SAD0D,CAA5D;AAAA,+BAMC,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,UAAb;AAAA,oBACET;AADF;AAAA;AAAA;AAAA;AAAA;AAND;AAAA;AAAA;AAAA;AAAA,cAlEF,eA4EE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,KAAK,EAAE;AAACmB,UAAAA,WAAW,EAAE;AAAd,SAAlB;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cA5EF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAuFD,CAtHD;;GAAMhD,S;UACWN,IAAI,CAACW,O;;;KADhBL,S;AAwHN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  Button,\n  Select,\n  Space\n} from 'antd';\nconst { Option } = Select;\n\nconst AddMentor = ({mentors, companies, setReloadMentors}) => {\n  const [form] = Form.useForm();\n  const submitaddMentor = (value) => {\n    form.resetFields();\n    let bodyData = JSON.stringify([{\"mentor\": value.mentor, \"email\": value.email, \"Companies\": value.Companies}]);\n    console.log(bodyData);\n    fetch(\n          \"http://localhost:3033/api/mentors\" /* Route to send the CSV file to \n                                                    generate the schedule */,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n            },\n            body: bodyData,\n          }\n        )\n          .then((response) => response.json())\n          .then((result) => {\n              alert('Mentor Created');\n              setReloadMentors(true);\n          })\n          .catch((error) => {\n            alert(\"Error:\", error);\n          });\n  };\n  \n  const listCompanies = companies.map((row) => (<Option value={row.company}>{row.company}</Option>));\n\n\n  return (\n    <>\n      <Space><h1>Add Mentor</h1></Space>\n      <Form\n        form={form}\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 14,\n        }}\n        layout=\"horizontal\"\n        initialValues={{\n          size: 'small',\n        }}\n        onFinish={submitaddMentor}\n        initialValues={{\n        remember: false,\n        preserve: false,\n      }}\n      >\n        <Form.Item name='mentor' label=\"Mentor Name\" rules={[\n          {\n            required: true,\n            message: 'Please input mentor name!',\n            whitespace: true,\n          },\n        ]}>\n          <Input />\n        </Form.Item >\n        <Form.Item name='email' label=\"Mentor Email\" \n        rules={[\n          {\n            required: true,\n            message: 'Please input mentor email!',\n            whitespace: true,\n          },\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n        ]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name='emailConfirmation' label=\"Confirm Mentor Email\" \n        dependencies={['email']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please input again the mentor email!',\n            whitespace: true,\n          },\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('email') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(new Error('The two emails that you entered do not match!'));\n            },\n          }),\n        ]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name='Companies' label=\"Select Companies\" rules={[\n          {\n            required: true,\n            message: 'Please input at least one company!',\n          },\n        ]}>\n         <Select mode=\"multiple\" >\n          {listCompanies}\n        </Select>\n        </Form.Item>\n        <Form.Item style={{paddingLeft: 162}}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default AddMentor;"]},"metadata":{},"sourceType":"module"}